pipeline {
    agent {
        label 'win-agent'
    }
    parameters {
        string(name: 'REPO_BRANCH',
               defaultValue: 'main',
               description: 'From which branch to run the tests')
        booleanParam(name: 'UPGRADE',
                     defaultValue: false,
                     description: 'Upgrade python librarys if true')
        booleanParam(name: 'MAIN_PAGE_TESTS',
                     defaultValue: true,
                     description: 'Run main webpage tests if true')
        booleanParam(name: 'MAIL_PAGE_TESTS',
                     defaultValue: false,
                     description: 'Run mail webpage tests if true')
        booleanParam(name: 'FACULTY_PAGE_TESTS',
                     defaultValue: true,
                     description: 'Run faculty webpage tests if true')
        booleanParam(name: 'EKURSY_TESTS',
                     defaultValue: true,
                     description: 'Run eKursy webpage tests if true')
        choice(name: 'LOG_LEVEL',
               choices: ['TRACE', 'DEBUG', 'INFO'],
               description: 'Pick a log level for the robot command')
        choice(name: 'BROWSER',
               choices: ['Edge', 'Chrome', 'Firefox'],
               description: 'Pick a browser in which to run the tests')
        choice(name: 'SEMSESTER',
               choices: ['WINTER', 'SUMMER'],
               description: 'Pick a current semseter, applys only to faculty page tests')
        string(name: 'EXTRA_ROBOT_PARAMS',
               defaultValue: '--exclude intrusive',
               description: 'extra robot params passed to the robot command for every test')
        choice(name: 'LOGIN_DATA',
               choices: ['Exisitng', 'Passed'],
               description: 'Pick either to use existing on the Jenkins agent login data or passed as parameters')
        string(name: 'USERNAME',
               defaultValue: '',
               description: 'Enter a username, ignored if LOGIN_DATA is set to Existing')
        password(name: 'PASSWORD',
                 defaultValue: '',
                 description: 'Enter a password, ignored if LOGIN_DATA is set to Existing')
    }
    stages {
        stage('Upgrade Python Librarys') {
            when { expression { params.UPGRADE == true } }
            steps {
                echo 'Hello World'
                bat """
                    python --version
                    pip install --upgrade robotframework
                    pip install --upgrade robotframework-seleniumlibrary
                    pip install --upgrade pdfquery
                    pip install --upgrade six
                """
            }
        }
        stage('Get Repo') {
            steps {
                git branch: params.REPO_BRANCH, url: 'https://github.com/mbrunka/university_site_tests'
            }
        }
        stage('Test Setup') {
            steps {
                def combinedParams = ''
                if (params.LOGIN_DATA == 'Existing') {
                    combinedParams = '--variablefile C:/Jenkins/secret.py'
                } else {
                    combinedParams = "--variable USERNAME:${params.USERNAME} --variable PASSWORD:${params.PASSWORD}"
                }
                combinedParams += " --variable SEMESTER:${params.SEMESTER}"
                combinedParams += " --variable BROWSER:${params.BROWSER}"

            }
        }
        stage('Run Main Webpage Tests') {
            when { expression { params.MAIN_PAGE_TESTS == true } }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    bat """
                        python -m robot ^
                        --log ./results/main_page_tests_log.html ^
                        --report ./results/main_page_tests_report.html ^
                        --output ./results/main_page_tests_output.xml ^
                        --variablefile C:/Jenkins/secret.py ^
                        --loglevel ${params.LOG_LEVEL}:INFO ^
                        ${combinedParams} ^
                        ${params.EXTRA_ROBOT_PARAMS} ^
                        ./tests/main_page_tests.robot ^
                    """
                }
            }
        }
        stage('Run Mail Webpage Tests') {
            when { expression { params.MAIL_PAGE_TESTS == true } }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    bat """
                        python -m robot ^
                        --log ./results/mail_page_tests_log.html ^
                        --report ./results/mail_page_tests_report.html ^
                        --output ./results/mail_page_tests_output.xml ^
                        --variablefile C:/Jenkins/secret.py ^
                        --loglevel ${params.LOG_LEVEL}:INFO ^
                        ${combinedParams} ^
                        ${params.EXTRA_ROBOT_PARAMS} ^
                        ./tests/mail_page_tests.robot ^
                    """
                }
            }
        }
        stage('Run Faculty Webpage Tests') {
            when { expression { params.FACULTY_PAGE_TESTS == true } }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    bat """
                        python -m robot ^
                        --log ./results/faculty_page_tests_log.html ^
                        --report ./results/faculty_page_tests_report.html ^
                        --output ./results/faculty_page_tests_output.xml ^
                        --variablefile C:/Jenkins/secret.py ^
                        --loglevel ${params.LOG_LEVEL}:INFO ^
                        ${combinedParams} ^
                        ${params.EXTRA_ROBOT_PARAMS} ^
                        ./tests/faculty_page_tests.robot ^
                    """
                }
            }
        }
        stage('Run eKursy Webpage Tests') {
            when { expression { params.EKURSY_TESTS == true } }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    bat """
                        python -m robot ^
                        --log ./results/ekursy_page_tests_log.html ^
                        --report ./results/ekursy_page_tests_report.html ^
                        --output ./results/ekursy_page_tests_output.xml ^
                        --variablefile C:/Jenkins/secret.py ^
                        --loglevel ${params.LOG_LEVEL}:INFO ^
                        ${combinedParams} ^
                        ${params.EXTRA_ROBOT_PARAMS} ^
                        ./tests/ekursy_tests.robot ^
                    """
                }
            }
        }
        stage('Publish Robot Framework Report') {
            steps {
                step([
                    $class : 'RobotPublisher',
                    outputPath : './results/',
                    outputFileName : '*_output.xml',
                    logFileName: '*_log.html',
                    reportFileName: '*_report.html',
                    disableArchiveOutput : false,
                    passThreshold : 98.0,
                    unstableThreshold: 80.0,
                    otherFiles : '*.png'
                ])
            }
        }
    }
}
